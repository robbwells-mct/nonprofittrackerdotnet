// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NonprofitTracker.Data;

#nullable disable

namespace NonprofitTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NonprofitTracker.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GoalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7263),
                            Description = "Our annual fundraising campaign to support all programs",
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalAmount = 100000m,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7263),
                            Name = "Annual Giving Campaign 2025",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7267),
                            Description = "Capital campaign for new facility construction",
                            EndDate = new DateTime(2026, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalAmount = 500000m,
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7268),
                            Name = "Building Fund",
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NonprofitTracker.Models.Constituent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVolunteer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("PreferredCommunication")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("LastName", "FirstName");

                    b.ToTable("Constituents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine1 = "123 Oak Street",
                            City = "Springfield",
                            DateCreated = new DateTime(2024, 10, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7501),
                            Email = "emily.johnson@email.com",
                            FirstName = "Emily",
                            Gender = "Female",
                            IsVolunteer = true,
                            LastName = "Johnson",
                            LastUpdated = new DateTime(2024, 10, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7510),
                            PhoneNumber = "(555) 123-4567",
                            PreferredCommunication = 0,
                            State = "IL",
                            ZipCode = "62701"
                        },
                        new
                        {
                            Id = 2,
                            AddressLine1 = "456 Maple Avenue",
                            City = "Springfield",
                            DateCreated = new DateTime(2024, 8, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7516),
                            Email = "michael.chen@email.com",
                            FirstName = "Michael",
                            Gender = "Male",
                            IsVolunteer = false,
                            LastName = "Chen",
                            LastUpdated = new DateTime(2024, 8, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7517),
                            PhoneNumber = "(555) 234-5678",
                            PreferredCommunication = 1,
                            State = "IL",
                            ZipCode = "62702"
                        },
                        new
                        {
                            Id = 3,
                            AddressLine1 = "789 Pine Road",
                            City = "Decatur",
                            DateCreated = new DateTime(2024, 12, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7522),
                            Email = "sarah.williams@email.com",
                            FirstName = "Sarah",
                            Gender = "Female",
                            IsVolunteer = true,
                            LastName = "Williams",
                            LastUpdated = new DateTime(2024, 12, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7523),
                            PhoneNumber = "(555) 345-6789",
                            PreferredCommunication = 0,
                            State = "IL",
                            ZipCode = "62521"
                        },
                        new
                        {
                            Id = 4,
                            AddressLine1 = "321 Elm Street",
                            City = "Peoria",
                            DateCreated = new DateTime(2024, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7527),
                            Email = "david.rodriguez@email.com",
                            FirstName = "David",
                            Gender = "Male",
                            IsVolunteer = false,
                            LastName = "Rodriguez",
                            LastUpdated = new DateTime(2024, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7529),
                            PhoneNumber = "(555) 456-7890",
                            PreferredCommunication = 2,
                            State = "IL",
                            ZipCode = "61601"
                        },
                        new
                        {
                            Id = 5,
                            AddressLine1 = "654 Cedar Lane",
                            City = "Rockford",
                            DateCreated = new DateTime(2025, 2, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7533),
                            Email = "jennifer.davis@email.com",
                            FirstName = "Jennifer",
                            Gender = "Female",
                            IsVolunteer = true,
                            LastName = "Davis",
                            LastUpdated = new DateTime(2025, 2, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7534),
                            PhoneNumber = "(555) 567-8901",
                            PreferredCommunication = 0,
                            State = "IL",
                            ZipCode = "61101"
                        },
                        new
                        {
                            Id = 6,
                            AddressLine1 = "987 Birch Drive",
                            City = "Aurora",
                            DateCreated = new DateTime(2024, 11, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7538),
                            Email = "robert.thompson@email.com",
                            FirstName = "Robert",
                            Gender = "Male",
                            IsVolunteer = false,
                            LastName = "Thompson",
                            LastUpdated = new DateTime(2024, 11, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7539),
                            PhoneNumber = "(555) 678-9012",
                            PreferredCommunication = 1,
                            State = "IL",
                            ZipCode = "60502"
                        },
                        new
                        {
                            Id = 7,
                            AddressLine1 = "147 Walnut Court",
                            City = "Naperville",
                            DateCreated = new DateTime(2024, 9, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7544),
                            Email = "lisa.anderson@email.com",
                            FirstName = "Lisa",
                            Gender = "Female",
                            IsVolunteer = true,
                            LastName = "Anderson",
                            LastUpdated = new DateTime(2024, 9, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7544),
                            PhoneNumber = "(555) 789-0123",
                            PreferredCommunication = 0,
                            State = "IL",
                            ZipCode = "60540"
                        },
                        new
                        {
                            Id = 8,
                            AddressLine1 = "258 Hickory Street",
                            City = "Joliet",
                            DateCreated = new DateTime(2025, 1, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7548),
                            Email = "james.wilson@email.com",
                            FirstName = "James",
                            Gender = "Male",
                            IsVolunteer = false,
                            LastName = "Wilson",
                            LastUpdated = new DateTime(2025, 1, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7549),
                            PhoneNumber = "(555) 890-1234",
                            PreferredCommunication = 2,
                            State = "IL",
                            ZipCode = "60431"
                        },
                        new
                        {
                            Id = 9,
                            AddressLine1 = "369 Sycamore Avenue",
                            City = "Evanston",
                            DateCreated = new DateTime(2025, 3, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7553),
                            Email = "amanda.garcia@email.com",
                            FirstName = "Amanda",
                            Gender = "Female",
                            IsVolunteer = true,
                            LastName = "Garcia",
                            LastUpdated = new DateTime(2025, 3, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7554),
                            PhoneNumber = "(555) 901-2345",
                            PreferredCommunication = 0,
                            State = "IL",
                            ZipCode = "60201"
                        },
                        new
                        {
                            Id = 10,
                            AddressLine1 = "741 Poplar Boulevard",
                            City = "Champaign",
                            DateCreated = new DateTime(2024, 7, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7608),
                            Email = "christopher.martinez@email.com",
                            FirstName = "Christopher",
                            Gender = "Male",
                            IsVolunteer = false,
                            LastName = "Martinez",
                            LastUpdated = new DateTime(2024, 7, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7609),
                            PhoneNumber = "(555) 012-3456",
                            PreferredCommunication = 1,
                            State = "IL",
                            ZipCode = "61820"
                        });
                });

            modelBuilder.Entity("NonprofitTracker.Models.ConstituentProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ConstituentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OutcomeRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SatisfactionRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConstituentId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ConstituentPrograms");
                });

            modelBuilder.Entity("NonprofitTracker.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AcknowledgmentDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AcknowledgmentSent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AcknowledgmentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ConstituentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditCardLast4")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DonationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GiftType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextRecurringDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurringFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ConstituentId");

                    b.HasIndex("DonationDate");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 5000m,
                            CampaignId = 1,
                            ConstituentId = 1,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7687),
                            DateCreated = new DateTime(2025, 2, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7700),
                            DonationDate = new DateTime(2025, 2, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7693),
                            DonationType = 0,
                            GiftType = 0,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 2, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7701),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7688)
                        },
                        new
                        {
                            Id = 2,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 10000m,
                            CampaignId = 2,
                            ConstituentId = 1,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7704),
                            DateCreated = new DateTime(2025, 4, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7707),
                            DonationDate = new DateTime(2025, 4, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7706),
                            DonationType = 0,
                            GiftType = 1,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 4, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7707),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7704)
                        },
                        new
                        {
                            Id = 3,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 250m,
                            CampaignId = 1,
                            ConstituentId = 2,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7709),
                            DateCreated = new DateTime(2025, 3, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7712),
                            DonationDate = new DateTime(2025, 3, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7711),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 3, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7714),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7710)
                        },
                        new
                        {
                            Id = 4,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 300m,
                            CampaignId = 1,
                            ConstituentId = 2,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7716),
                            DateCreated = new DateTime(2025, 5, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7718),
                            DonationDate = new DateTime(2025, 5, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7717),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 5, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7719),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7716)
                        },
                        new
                        {
                            Id = 5,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 100m,
                            CampaignId = 1,
                            ConstituentId = 3,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7721),
                            DateCreated = new DateTime(2025, 1, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7724),
                            DonationDate = new DateTime(2025, 1, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7723),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 1, 27, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7725),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7722)
                        },
                        new
                        {
                            Id = 6,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 100m,
                            CampaignId = 1,
                            ConstituentId = 3,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7727),
                            DateCreated = new DateTime(2025, 2, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7730),
                            DonationDate = new DateTime(2025, 2, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7729),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 2, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7735),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7728)
                        },
                        new
                        {
                            Id = 7,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 100m,
                            CampaignId = 1,
                            ConstituentId = 3,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7737),
                            DateCreated = new DateTime(2025, 3, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7740),
                            DonationDate = new DateTime(2025, 3, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7739),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 3, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7740),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7738)
                        },
                        new
                        {
                            Id = 8,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 7500m,
                            CampaignId = 2,
                            ConstituentId = 4,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7743),
                            DateCreated = new DateTime(2024, 12, 8, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7746),
                            DonationDate = new DateTime(2024, 12, 8, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7745),
                            DonationType = 0,
                            GiftType = 1,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2024, 12, 8, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7747),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7743)
                        },
                        new
                        {
                            Id = 9,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 500m,
                            CampaignId = 1,
                            ConstituentId = 5,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7748),
                            DateCreated = new DateTime(2025, 4, 12, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7752),
                            DonationDate = new DateTime(2025, 4, 12, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7751),
                            DonationType = 0,
                            GiftType = 0,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 4, 12, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7752),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7749)
                        },
                        new
                        {
                            Id = 10,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 750m,
                            CampaignId = 2,
                            ConstituentId = 5,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7754),
                            DateCreated = new DateTime(2025, 5, 12, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7757),
                            DonationDate = new DateTime(2025, 5, 12, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7756),
                            DonationType = 0,
                            GiftType = 1,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 5, 12, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7758),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7755)
                        },
                        new
                        {
                            Id = 11,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 1000m,
                            CampaignId = 1,
                            ConstituentId = 6,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7760),
                            DateCreated = new DateTime(2024, 12, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7763),
                            DonationDate = new DateTime(2024, 12, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7762),
                            DonationType = 0,
                            GiftType = 3,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2024, 12, 28, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7764),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7761)
                        },
                        new
                        {
                            Id = 12,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 200m,
                            CampaignId = 1,
                            ConstituentId = 7,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7765),
                            DateCreated = new DateTime(2025, 3, 18, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7768),
                            DonationDate = new DateTime(2025, 3, 18, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7767),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 3, 18, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7769),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7766)
                        },
                        new
                        {
                            Id = 13,
                            AcknowledgmentSent = false,
                            AcknowledgmentStatus = 0,
                            Amount = 350m,
                            CampaignId = 1,
                            ConstituentId = 7,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7771),
                            DateCreated = new DateTime(2025, 5, 7, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7774),
                            DonationDate = new DateTime(2025, 5, 7, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7773),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 5, 7, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7775),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7772)
                        },
                        new
                        {
                            Id = 14,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 2000m,
                            CampaignId = 1,
                            ConstituentId = 8,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7777),
                            DateCreated = new DateTime(2024, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7779),
                            DonationDate = new DateTime(2024, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7779),
                            DonationType = 0,
                            GiftType = 1,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2024, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7780),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7778)
                        },
                        new
                        {
                            Id = 15,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 2500m,
                            CampaignId = 1,
                            ConstituentId = 8,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7782),
                            DateCreated = new DateTime(2025, 6, 1, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7786),
                            DonationDate = new DateTime(2025, 6, 1, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7784),
                            DonationType = 0,
                            GiftType = 1,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 6, 1, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7787),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7783)
                        },
                        new
                        {
                            Id = 16,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 150m,
                            CampaignId = 1,
                            ConstituentId = 9,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7788),
                            DateCreated = new DateTime(2025, 4, 7, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7792),
                            DonationDate = new DateTime(2025, 4, 7, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7791),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 4, 7, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7793),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7789)
                        },
                        new
                        {
                            Id = 17,
                            AcknowledgmentSent = false,
                            AcknowledgmentStatus = 0,
                            Amount = 200m,
                            CampaignId = 1,
                            ConstituentId = 9,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7795),
                            DateCreated = new DateTime(2025, 6, 11, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7798),
                            DonationDate = new DateTime(2025, 6, 11, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7797),
                            DonationType = 0,
                            GiftType = 2,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2025, 6, 11, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7798),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7796)
                        },
                        new
                        {
                            Id = 18,
                            AcknowledgmentSent = true,
                            AcknowledgmentStatus = 0,
                            Amount = 3000m,
                            CampaignId = 2,
                            ConstituentId = 10,
                            CreatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7800),
                            DateCreated = new DateTime(2024, 11, 18, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7804),
                            DonationDate = new DateTime(2024, 11, 18, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7803),
                            DonationType = 0,
                            GiftType = 1,
                            IsRecurring = false,
                            LastUpdated = new DateTime(2024, 11, 18, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7805),
                            UpdatedDate = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7802)
                        });
                });

            modelBuilder.Entity("NonprofitTracker.Models.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Programs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7449),
                            Description = "After-school program for at-risk youth",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7450),
                            Name = "Youth Development Program"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7453),
                            Description = "Support services for elderly community members",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7453),
                            Name = "Senior Services"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7456),
                            Description = "Food bank and meal distribution services",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 6, 26, 19, 0, 48, 68, DateTimeKind.Utc).AddTicks(7457),
                            Name = "Food Assistance Program"
                        });
                });

            modelBuilder.Entity("NonprofitTracker.Models.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignedStaff")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ConstituentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequestType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConstituentId");

                    b.HasIndex("DateRequested");

                    b.HasIndex("Status");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NonprofitTracker.Models.ConstituentProgram", b =>
                {
                    b.HasOne("NonprofitTracker.Models.Constituent", "Constituent")
                        .WithMany("ConstituentPrograms")
                        .HasForeignKey("ConstituentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NonprofitTracker.Models.Program", "Program")
                        .WithMany("ConstituentPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constituent");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("NonprofitTracker.Models.Donation", b =>
                {
                    b.HasOne("NonprofitTracker.Models.Campaign", "Campaign")
                        .WithMany("Donations")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NonprofitTracker.Models.Constituent", "Constituent")
                        .WithMany("Donations")
                        .HasForeignKey("ConstituentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Constituent");
                });

            modelBuilder.Entity("NonprofitTracker.Models.ServiceRequest", b =>
                {
                    b.HasOne("NonprofitTracker.Models.Constituent", "Constituent")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ConstituentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constituent");
                });

            modelBuilder.Entity("NonprofitTracker.Models.Campaign", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("NonprofitTracker.Models.Constituent", b =>
                {
                    b.Navigation("ConstituentPrograms");

                    b.Navigation("Donations");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("NonprofitTracker.Models.Program", b =>
                {
                    b.Navigation("ConstituentPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
